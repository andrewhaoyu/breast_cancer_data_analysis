library(bc2)
library(data.table)
##analysis for Icog
data1 <- fread("./data/iCOGS_euro_v10_10232017.csv",header=T)
data1 <- as.data.frame(data1)
y.pheno.mis1 <- cbind(data1$Behaviour1,data1$ER_status1,data1$PR_status1,data1$HER2_status1,data1$Grade1)
colnames(y.pheno.mis1) = c("Behavior","ER","PR","HER2","Grade")
x.test.all.mis1 <- data1[,c(27:203)]
###pc1-10 and age
x.covar.mis1 <- data1[,c(5:14,204)]
age <- data1[,204]
idx.complete <- which(age!=888)
x.all.mis1 <- as.matrix(cbind(x.test.all.mis1[,i1],x.covar.mis1))
colnames(x.all.mis1)[1] <- "gene"
y.pheno.mis1 <- y.pheno.mis1[idx.complete,]
x.all.mis1 <- x.all.mis1[idx.complete,]
Heter.result.Icog = TwoStageModel(y.pheno.mis1,baselineonly = NULL,additive = x.all.mis1,pairwise.interaction = NULL,saturated = NULL,missingTumorIndicator = 888,missingDataAlgorithm="OneStepMLE")
install_github("andrewhaoyu/bc2",ref='development')
install_github("andrewhaoyu/bc2",ref='development')
install_github("andrewhaoyu/bc2",ref='development')
install_github("andrewhaoyu/bc2",ref='development')
install_github("andrewhaoyu/bc2",ref='development')
library(devtools)
install_github("andrewhaoyu/bc2",ref='development')
library(readr)
library(devtools)
library(CompQuadForm)
library(bc2)
library(data.table)
##analysis for Icog
data1 <- fread("./data/iCOGS_euro_v10_10232017.csv",header=T)
data1 <- as.data.frame(data1)
y.pheno.mis1 <- cbind(data1$Behaviour1,data1$ER_status1,data1$PR_status1,data1$HER2_status1,data1$Grade1)
colnames(y.pheno.mis1) = c("Behavior","ER","PR","HER2","Grade")
x.test.all.mis1 <- data1[,c(27:203)]
###pc1-10 and age
x.covar.mis1 <- data1[,c(5:14,204)]
age <- data1[,204]
idx.complete <- which(age!=888)
x.all.mis1 <- as.matrix(cbind(x.test.all.mis1[,i1],x.covar.mis1))
colnames(x.all.mis1)[1] <- "gene"
i1 =1
x.all.mis1 <- as.matrix(cbind(x.test.all.mis1[,i1],x.covar.mis1))
colnames(x.all.mis1)[1] <- "gene"
y.pheno.mis1 <- y.pheno.mis1[idx.complete,]
x.all.mis1 <- x.all.mis1[idx.complete,]
Heter.result.Icog = TwoStageModel(y.pheno.mis1,baselineonly = NULL,additive = x.all.mis1,pairwise.interaction = NULL,saturated = NULL,missingTumorIndicator = 888,missingDataAlgorithm="OneStepMLE")
install_github("andrewhaoyu/bc2",ref='development')
library(bc2)
Heter.result.Icog = TwoStageModel(y.pheno.mis1,baselineonly = NULL,additive = x.all.mis1,pairwise.interaction = NULL,saturated = NULL,missingTumorIndicator = 888,missingDataAlgorithm="OneStepMLE")
install_github("andrewhaoyu/bc2",ref='development')
library(bc2)
library(data.table)
data1 <- fread("./data/iCOGS_euro_v10_10232017.csv",header=T)
data1 <- as.data.frame(data1)
y.pheno.mis1 <- cbind(data1$Behaviour1,data1$ER_status1,data1$PR_status1,data1$HER2_status1,data1$Grade1)
colnames(y.pheno.mis1) = c("Behavior","ER","PR","HER2","Grade")
x.test.all.mis1 <- data1[,c(27:203)]
###pc1-10 and age
x.covar.mis1 <- data1[,c(5:14,204)]
age <- data1[,204]
idx.complete <- which(age!=888)
x.all.mis1 <- as.matrix(cbind(x.test.all.mis1[,i1],x.covar.mis1))
colnames(x.all.mis1)[1] <- "gene"
y.pheno.mis1 <- y.pheno.mis1[idx.complete,]
x.all.mis1 <- x.all.mis1[idx.complete,]
y <- y.pheno.mis1
baselineonly <- NULL
additive <- x.all.mis1
pairwise.interaction <- NULL
saturated <- NULL
missingTumorIndicator <- 888
tumor.number <- ncol(y)-1
y.case.control <- y[,1]
y.tumor <- y[,2:(tumor.number+1)]
y.pheno.complete <- GenerateCompleteYPheno(y,missingTumorIndicator)
freq.subtypes <- GenerateFreqTable(y.pheno.complete)
if(CheckControlTumor(y.case.control,y.tumor)==1){
return(print("ERROR:The tumor characteristics for control subtypes should put as NA"))
}
tumor.names <- colnames(y.tumor)
if(is.null(tumor.names)){
tumor.names <- paste0(c(1:tumor.number))
}
tumor.character.cat = GenerateTumorCharacterCat(y.pheno.complete)
z.design.baselineonly <- GenerateZDesignBaselineonly(tumor.character.cat,
tumor.number,
tumor.names,
freq.subtypes)
z.design.additive <- GenerateZDesignAdditive(tumor.character.cat,
tumor.number,
tumor.names,
freq.subtypes)
z.design.pairwise.interaction <- GenerateZDesignPairwiseInteraction(tumor.character.cat,
tumor.number,
tumor.names,
freq.subtypes)
z.design.saturated <- GenerateZDesignSaturated(tumor.character.cat,
tumor.number,
tumor.names,
freq.subtypes)
full.second.stage.names <- colnames(z.design.saturated)
covar.names <- GenerateCovarName(baselineonly,
additive,
pairwise.interaction,
saturated)
z.all <- ZDesigntoZall(baselineonly,
additive,
pairwise.interaction,
saturated,
z.design.baselineonly,
z.design.additive,
z.design.pairwise.interaction,
z.design.saturated)
delta0 <-StartValueFunction(freq.subtypes,y.case.control,z.all)
z.standard <- z.design.additive[,-1,drop=F]
#x.all has no intercept yet
#we will add the intercept in C code
x.all <- GenerateXAll(y,baselineonly,additive,pairwise.interaction,saturated)
x.all.complete <- GenerateCompleteXCovariates(y,x.all,missingTumorIndicator)
prob.fit.result <- ProbFitting(delta0,y,x.all,z.standard,z.all,missingTumorIndicator=missingTumorIndicator)
y.fit <- prob.fit.result[[1]]
missing.vec <- as.numeric(as.vector(prob.fit.result[[2]]))
missing.mat <- prob.fit.result[[3]]
missing.mat.vec <- as.numeric(as.vector(missing.mat))
missing.number <- as.integer(length(missing.vec))
complete.vec <- prob.fit.result[[4]]
missingTumorIndicator
install_github("andrewhaoyu/bc2",ref='development')
library(bc2)
prob.fit.result <- ProbFitting(delta0,y,x.all,z.standard,z.all,missingTumorIndicator=missingTumorIndicator)
y.fit <- prob.fit.result[[1]]
missing.vec <- as.numeric(as.vector(prob.fit.result[[2]]))
missing.mat <- prob.fit.result[[3]]
missing.mat.vec <- as.numeric(as.vector(missing.mat))
missing.number <- as.integer(length(missing.vec))
complete.vec <- prob.fit.result[[4]]
length(complete.vec)
length(missing.vec)
dim(y.pheno.complete)
head(complete.vec)
install_github("andrewhaoyu/bc2",ref='development')
library(bc2)
prob.fit.result <- ProbFitting(delta0,y,x.all,z.standard,z.all,missingTumorIndicator=missingTumorIndicator)
y.fit <- prob.fit.result[[1]]
missing.vec <- as.numeric(as.vector(prob.fit.result[[2]]))
missing.mat <- prob.fit.result[[3]]
missing.mat.vec <- as.numeric(as.vector(missing.mat))
missing.number <- as.integer(length(missing.vec))
complete.vec <- prob.fit.result[[4]]
length(complete.vec)
y.fit.complete <- y.fit[complete.vec,]
install_github("andrewhaoyu/bc2",ref='development')
library(bc2)
Heter.result.Icog = TwoStageModel(y.pheno.mis1,baselineonly = NULL,additive = x.all.mis1,pairwise.interaction = NULL,saturated = NULL,missingTumorIndicator = 888,missingDataAlgorithm="OneStepMLE")
install_github("andrewhaoyu/bc2",ref='development')
library(bc2)
Heter.result.Icog = TwoStageModel(y.pheno.mis1,baselineonly = NULL,additive = x.all.mis1,pairwise.interaction = NULL,saturated = NULL,missingTumorIndicator = 888,missingDataAlgorithm="OneStepMLE")
install_github("andrewhaoyu/bc2",ref='development')
library(bc2)
library(data.table)
data1 <- fread("./data/iCOGS_euro_v10_10232017.csv",header=T)
data1 <- as.data.frame(data1)
y.pheno.mis1 <- cbind(data1$Behaviour1,data1$ER_status1,data1$PR_status1,data1$HER2_status1,data1$Grade1)
colnames(y.pheno.mis1) = c("Behavior","ER","PR","HER2","Grade")
x.test.all.mis1 <- data1[,c(27:203)]
###pc1-10 and age
x.covar.mis1 <- data1[,c(5:14,204)]
age <- data1[,204]
idx.complete <- which(age!=888)
x.all.mis1 <- as.matrix(cbind(x.test.all.mis1[,i1],x.covar.mis1))
colnames(x.all.mis1)[1] <- "gene"
y.pheno.mis1 <- y.pheno.mis1[idx.complete,]
x.all.mis1 <- x.all.mis1[idx.complete,]
Heter.result.Icog = TwoStageModel(y.pheno.mis1,baselineonly = NULL,additive = x.all.mis1,pairwise.interaction = NULL,saturated = NULL,missingTumorIndicator = 888,missingDataAlgorithm = "EM")
y.pheno.complete1 <- GenerateCompleteYPheno(y.pheno.mis1,missingTumorIndicator)
x.all.complete1 <- GenerateCompleteXCovariates(y.pheno.mis1,x.all,missingTumorIndicator)
Heter.result.Icog.OneStepMle <- TwoStageModel(y.pheno.mis1,baselineonly = NULL,additive = x.all.mis1,pairwise.interaction = NULL,saturated = NULL,missingTumorIndicator = 888,missingDataAlgorithm = "OneStepMle")
Heter.result.Icog.OneStepMle <- TwoStageModel(y.pheno.mis1,baselineonly = NULL,additive = x.all.mis1,pairwise.interaction = NULL,saturated = NULL,missingTumorIndicator = 888,missingDataAlgorithm = "OneStepMle")
Heter.result.Icog.OneStepMle[[1]]
Heter.result.Icog.OneStepMle[[2]]
TwoStageModel()
TwoStageModel
Heter.result.Icog.OneStepMle <- TwoStageModel(y.pheno.mis1,baselineonly = NULL,additive = x.all.mis1,pairwise.interaction = NULL,saturated = NULL,missingTumorIndicator = 888,missingDataAlgorithm = "OneStepMLE")
Heter.result.Icog.OneStepMle[[1]]
Heter.result.Icog.EM[[1]]
Heter.result.Icog.EM = TwoStageModel(y.pheno.mis1,baselineonly = NULL,additive = x.all.mis1,pairwise.interaction = NULL,saturated = NULL,missingTumorIndicator = 888,missingDataAlgorithm = "EM")
Heter.result.Icog.OneStepMle[[1]]
Heter.result.Icog.EM [[1]]
y.pheno.complete1 <- GenerateCompleteYPheno(y.pheno.mis1,missingTumorIndicator)
x.all.complete1 <- GenerateCompleteXCovariates(y.pheno.mis1,x.all,missingTumorIndicator)
Heter.result.Icog.Complete <- TwoStageModel(y.pheno.complete1,baselineonly = NULL,additive = x.all.complete1,pairwise.interaction = NULL,saturated = NULL,missingTumorIndicator = NULL)
Heter.result.Icog.Complete[[1]]
Heter.result.Icog.EM [[1]]
Heter.result.Icog.OneStepMle[[1]]
install_github("andrewhaoyu/bc2",ref='development')
y <- y.pheno.mis1
baselineonly <- NULL
additive <- x.all.mis1
pairwise.interaction <- NULL
saturated <- NULL
missingTumorIndicator <- 888
tumor.number <- ncol(y)-1
y.case.control <- y[,1]
y.tumor <- y[,2:(tumor.number+1)]
y.pheno.complete <- GenerateCompleteYPheno(y,missingTumorIndicator)
y <- y.pheno.complete
baselineonly <- NULL
additive <- x.all.complete1
pairwise.interaction <- NULL
saturated <- NULL
tumor.number <- ncol(y)-1
y.case.control <- y[,1]
y.tumor <- y[,2:(tumor.number+1)]
y.pheno.complete <- GenerateCompleteYPheno(y,missingTumorIndicator)
y <- as.matrix(y)
tumor.number <- ncol(y)-1
y.case.control <- y[,1]
y.tumor <- y[,2:(tumor.number+1)]
y.pheno.complete <- GenerateCompleteYPheno(y,missingTumorIndicator)
y.pheno.complete <- y
freq.subtypes <- GenerateFreqTable(y.pheno.complete)
if(CheckControlTumor(y.case.control,y.tumor)==1){
return(print("ERROR:The tumor characteristics for control subtypes should put as NA"))
}
tumor.names <- colnames(y.tumor)
if(is.null(tumor.names)){
tumor.names <- paste0(c(1:tumor.number))
}
tumor.character.cat = GenerateTumorCharacterCat(y.pheno.complete)
z.design.baselineonly <- GenerateZDesignBaselineonly(tumor.character.cat,
tumor.number,
tumor.names,
freq.subtypes)
z.design.additive <- GenerateZDesignAdditive(tumor.character.cat,
tumor.number,
tumor.names,
freq.subtypes)
z.design.pairwise.interaction <- GenerateZDesignPairwiseInteraction(tumor.character.cat,
tumor.number,
tumor.names,
freq.subtypes)
z.design.saturated <- GenerateZDesignSaturated(tumor.character.cat,
tumor.number,
tumor.names,
freq.subtypes)
z.all <- ZDesigntoZall(baselineonly,
additive,
pairwise.interaction,
saturated,
z.design.baselineonly,
z.design.additive,
z.design.pairwise.interaction,
z.design.saturated)
delta0 <-StartValueFunction(freq.subtypes,y.case.control,z.all)
#x.all has no intercept yet
#we will add the intercept in C code
x.all <- GenerateXAll(y,baselineonly,additive,pairwise.interaction,saturated)
z.standard <- z.design.additive[,-1]
tol <- as.numeric(1e-04)
#delta_old <- rep(0,length(delta0))
delta_old <- delta0
##EM algorithm
##first E step
#print(paste0("Begin EM algorithm"))
#print(paste0("EM round: 1"))
y.fit <- ProbFitting(delta0,y,x.all,z.standard,z.all,missingTumorIndicator=NULL)[[1]]
length(y.fit)
dim(y)
length(y.fit)/46896
N <- as.integer(nrow(x.all))
N
#x <- cbind(1,x)
#p <- ncol(x)
M <- as.integer(nrow(z.standard))
NCOV   <- as.integer(ncol(x.all))
NM     <- N*M
nparm  <- as.integer(length(delta0))
deltai <- as.numeric(delta0)
NITER  <- as.integer(500)
Y <- as.numeric(as.vector(y.fit))
X <- as.numeric(as.vector(x.all))
ZallVec = as.numeric(as.vector(z.all))
Znr = as.integer(nrow(z.all))
Znc = as.integer(ncol(z.all))
debug     <- as.integer(1)
ret_rc    <- as.integer(1)
ret_delta <- as.numeric(rep(-9999, nparm))
ret_info <- as.numeric(rep(-9999,nparm^2))
ret_p <- as.numeric(rep(0,NM))
ret_Inv_info_vec <- as.numeric(as.vector(matrix(0,Znc,Znc)))
YminusP <- Y
W_obs <- as.numeric(rep(0,N*M*M))
WXZ_vec <- as.numeric(rep(0,N*M*Znc))
WX_vec <- as.numeric(rep(0,N*M*Znr))
temp <- .C("CompleteCasesScoreSupport",
deltai,
nparm,
Y=Y,
X,
ZallVec,
Znr,Znc, N, M, NCOV, NITER,
tol,
tolMaxstep,
debug,
ret_rc=ret_rc,
ret_delta=ret_delta,
ret_info=ret_info,
ret_p=ret_p,
ret_Inv_info_vec=ret_Inv_info_vec,
YminusP=YminusP,
W_obs = W_obs,
WXZ_vec = WXZ_vec,
WX_vec = WX_vec)
temp <- .C("CompleteCasesScoreSupport",
deltai,
nparm,
Y=Y,
X,
ZallVec,
Znr,Znc, N, M, NCOV, NITER,
tol,
debug,
ret_rc=ret_rc,
ret_delta=ret_delta,
ret_info=ret_info,
ret_p=ret_p,
ret_Inv_info_vec=ret_Inv_info_vec,
YminusP=YminusP,
W_obs = W_obs,
WXZ_vec = WXZ_vec,
WX_vec = WX_vec)
install_github("andrewhaoyu/bc2",ref='development')
library(bc2)
temp <- .C("CompleteCasesScoreSupport",
deltai,
nparm,
Y=Y,
X,
ZallVec,
Znr,Znc, N, M, NCOV, NITER,
tol,
debug,
ret_rc=ret_rc,
ret_delta=ret_delta,
ret_info=ret_info,
ret_p=ret_p,
ret_Inv_info_vec=ret_Inv_info_vec,
YminusP=YminusP,
W_obs = W_obs,
WXZ_vec = WXZ_vec,
WX_vec = WX_vec)
temp <- .C("CompleteCasesScoreSupport",
deltai,
nparm,
Y=Y,
X,
ZallVec,
Znr,Znc, N, M, NCOV, NITER,
tol,
debug,
ret_rc=ret_rc,
ret_delta=ret_delta,
ret_info=ret_info,
ret_p=ret_p,
ret_Inv_info_vec=ret_Inv_info_vec,
YminusP=YminusP,
W_obs = W_obs,
WXZ_vec = WXZ_vec,
WX_vec = WX_vec)
install_github("andrewhaoyu/bc2",ref='development')
install.packages("nmle")
install_github("https://github.com/cran/nlme")
library(devtools)
install_github("https://github.com/cran/nlme")
install_github("cran/nlme")
install_github("cran/nlme")
exp(1.04)
471.5-462.9
install.packages("manhattanly")
library(manhattanly)
manhattanly(HapMap,
snp = "SNP", gene = "GENE",
annotation1 = "ZSCORE", annotation2 = "EFFECTSIZE",
highlight = significantSNP)
head(HapMap)
write.csv(fine_mapping,file="/spin1/users/zhangh24/breast_cancer_data_analysis/data/fine_mapping_annotated_clean.csv")
ln(1.2)^2
log(1.2)^2
(log(1.2))^2
log(1.2&2)
log(1.2^22)
log(1.2^2)
5*log(1.2)^2
5*log(1.2^2)
5*(log(1.2))^2
data <- read.csv("/Users/zhangh24/GoogleDrive/breast_cancer_data_analysis/stractch/result/discovery_casecase.csv")
head(data)
try <- data[,2]
head(try)
data <- read.csv("/Users/zhangh24/GoogleDrive/breast_cancer_data_analysis/stractch/result/discovery_casecase.csv",stringsAsFactors = F)
try <- data[,2]
head(try)
split(try,"(")
strsplit(try,"(")
strsplit(try,"-")
strsplit(try,"\(")
strsplit(try,"\\(")
try[[1]]
try2 <- strsplit(try,"\\(")
try2[[1]]
try2[[1]][1]
try2[[1]][2]
strsplit(try2[[1]][2],"\\)")
try3 <- strsplit(try2[[1]][2],"\\)")
try3
try3 <- strsplit(try2[[1]][2],"-")
try
try3
as.numeric(try3[[1]])
as.numeric(try3[[1]][1])
as.numeric(try3[[1]][2])
gsub(")","",try3[[1]][2])
x <- data[1,2]
x
places <- 2
temp.x <- strsplit(x,"\\(")
n <- length(x)
result.low <- rep(0,n)
result <- rep(0,n)
result.high <- rep(0,n)
i <- 1
result.low[i] <- round(as.numeric(temp.x[[i]][1]),places)
temp2 <- strsplit(temp.x[[i]][2],"-")
result[i] <- round(as.numeric(temp2[[1]]),places)
round(as.numeric(temp2[[1]]),places)
temp2
result[i] <- round(as.numeric(temp2[[1]][1]),places)
result[i]
result.high[i] <- round(as.numeric(gsub(")","",temp2[[2]])),places)
result.high[i] <- round(as.numeric(gsub(")","",temp2[[1]][2])),places)
result.high
process <- function(x){
places <- 2
temp.x <- strsplit(x,"\\(")
n <- length(x)
result.low <- rep(0,n)
result <- rep(0,n)
result.high <- rep(0,n)
final.result <- rep("c",n)
for(i in 1:n){
result.low[i] <- round(as.numeric(temp.x[[i]][1]),places)
temp2 <- strsplit(temp.x[[i]][2],"-")
result[i] <- round(as.numeric(temp2[[1]][1]),places)
result.high[i] <- round(as.numeric(gsub(")","",temp2[[1]][2])),places)
final.result[i] <- paste0(result[i],"(",result.low,"-",result.high,")")
}
return(final.result)
}
process(data[,2])
warnings()
process <- function(x){
places <- 2
temp.x <- strsplit(x,"\\(")
n <- length(x)
result.low <- rep(0,n)
result <- rep(0,n)
result.high <- rep(0,n)
final.result <- rep("c",n)
for(i in 1:n){
result.low[i] <- round(as.numeric(temp.x[[i]][1]),places)
temp2 <- strsplit(temp.x[[i]][2],"-")
result[i] <- round(as.numeric(temp2[[1]][1]),places)
result.high[i] <- round(as.numeric(gsub(")","",temp2[[1]][2])),places)
final.result[i] <- paste0(result[i],"(",result.low[i],"-",result.high[i],")")
}
return(final.result)
}
process(data[,2])
data2
data[,2]
data
data[,2] <- process(data[,2])
data[,4] <- process(data[,4])
data[,6] <- process(data[,6])
data[,8] <- process(data[,8])
data
write.csv(data,"/Users/zhangh24/GoogleDrive/breast_cancer_data_analysis/stractch/result/discovery_casecase_2des.csv")
data <- read.csv("/Users/zhangh24/GoogleDrive/breast_cancer_data_analysis/stractch/result/discovery_casecase.csv",stringsAsFactors = F)
data
process <- function(x){
places <- 2
temp.x <- strsplit(x,"\\(")
n <- length(x)
result.low <- rep(0,n)
result <- rep(0,n)
result.high <- rep(0,n)
final.result <- rep("c",n)
for(i in 1:n){
result[i] <- round(as.numeric(temp.x[[i]][1]),places)
temp2 <- strsplit(temp.x[[i]][2],"-")
result.low[i] <- round(as.numeric(temp2[[1]][1]),places)
result.high[i] <- round(as.numeric(gsub(")","",temp2[[1]][2])),places)
final.result[i] <- paste0(result[i],"(",result.low[i],"-",result.high[i],")")
}
return(final.result)
}
data[,2] <- process(data[,2])
data[,4] <- process(data[,4])
data[,6] <- process(data[,6])
data[,8] <- process(data[,8])
write.csv(data,"/Users/zhangh24/GoogleDrive/breast_cancer_data_analysis/stractch/result/discovery_casecase_2des.csv")
